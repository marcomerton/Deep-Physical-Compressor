function [rec, J, Jdot] = py_decoder_dyn(q, dq)
%[rec, J, Jdot] = PY_DECODER_DYN Returns the structures required to solve
%the reduced dynamic. Assumes a model and connectivity (edge_index &
%edge_attr) are in python workspace.
%   rec  : Reconstructed positions
%   J    : Jacobian of the decoder
%   Jdot : Time derivate of the Jacobian (Hessian)

[rec, J, Jdot] = pyrun([ ...
    "emb = torch.Tensor(np.array(q))" ...
    "demb = torch.Tensor(np.array(dq))" ...
    "with torch.no_grad():" ...
    "   r = model.decode(emb, d).view(view_size)" ...
    "   r = r.numpy()" ...
    "j = jacobian(modelf_j, emb).detach().numpy()" ...
    "jd = torch.empty(view_size, emb_size)" ...
    "for idx in range(view_size):" ...
    "   jd[idx,:] = hvp(modelf_h(idx), emb, demb)[1]" ...
    "jd = jd.detach().numpy()"], ...
    ["r", "j", "jd"], ...
    q=q, dq=dq);

rec = double(rec);
J = double(J);
Jdot = double(Jdot);

end